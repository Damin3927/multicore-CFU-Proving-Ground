// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cfu_hls_cfu_hls,hls_ip_2024_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-csg324-1,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.348000,HLS_SYN_LAT=4743,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1450,HLS_SYN_LUT=1148,HLS_VERSION=2024_1}" *)

module cfu_hls (
        ap_clk,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        funct3_i,
        funct7_i,
        src1_i,
        src2_i,
        rslt_o
);

parameter    ap_ST_fsm_state1 = 41'd1;
parameter    ap_ST_fsm_state2 = 41'd2;
parameter    ap_ST_fsm_pp0_stage0 = 41'd4;
parameter    ap_ST_fsm_pp0_stage1 = 41'd8;
parameter    ap_ST_fsm_pp0_stage2 = 41'd16;
parameter    ap_ST_fsm_pp0_stage3 = 41'd32;
parameter    ap_ST_fsm_pp0_stage4 = 41'd64;
parameter    ap_ST_fsm_pp0_stage5 = 41'd128;
parameter    ap_ST_fsm_pp0_stage6 = 41'd256;
parameter    ap_ST_fsm_pp0_stage7 = 41'd512;
parameter    ap_ST_fsm_pp0_stage8 = 41'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 41'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 41'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 41'd8192;
parameter    ap_ST_fsm_pp0_stage12 = 41'd16384;
parameter    ap_ST_fsm_pp0_stage13 = 41'd32768;
parameter    ap_ST_fsm_pp0_stage14 = 41'd65536;
parameter    ap_ST_fsm_pp0_stage15 = 41'd131072;
parameter    ap_ST_fsm_pp0_stage16 = 41'd262144;
parameter    ap_ST_fsm_pp0_stage17 = 41'd524288;
parameter    ap_ST_fsm_pp0_stage18 = 41'd1048576;
parameter    ap_ST_fsm_pp0_stage19 = 41'd2097152;
parameter    ap_ST_fsm_pp0_stage20 = 41'd4194304;
parameter    ap_ST_fsm_pp0_stage21 = 41'd8388608;
parameter    ap_ST_fsm_pp0_stage22 = 41'd16777216;
parameter    ap_ST_fsm_pp0_stage23 = 41'd33554432;
parameter    ap_ST_fsm_pp0_stage24 = 41'd67108864;
parameter    ap_ST_fsm_pp0_stage25 = 41'd134217728;
parameter    ap_ST_fsm_pp0_stage26 = 41'd268435456;
parameter    ap_ST_fsm_pp0_stage27 = 41'd536870912;
parameter    ap_ST_fsm_pp0_stage28 = 41'd1073741824;
parameter    ap_ST_fsm_pp0_stage29 = 41'd2147483648;
parameter    ap_ST_fsm_pp0_stage30 = 41'd4294967296;
parameter    ap_ST_fsm_pp0_stage31 = 41'd8589934592;
parameter    ap_ST_fsm_pp0_stage32 = 41'd17179869184;
parameter    ap_ST_fsm_pp0_stage33 = 41'd34359738368;
parameter    ap_ST_fsm_pp0_stage34 = 41'd68719476736;
parameter    ap_ST_fsm_pp0_stage35 = 41'd137438953472;
parameter    ap_ST_fsm_pp0_stage36 = 41'd274877906944;
parameter    ap_ST_fsm_state44 = 41'd549755813888;
parameter    ap_ST_fsm_state45 = 41'd1099511627776;

input   ap_clk;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] funct3_i;
input  [7:0] funct7_i;
input  [31:0] src1_i;
input  [31:0] src2_i;
output  [31:0] rslt_o;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "auto" *) reg   [40:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] src1_i_0_data_reg;
reg    src1_i_0_vld_reg;
reg    src1_i_0_ack_out;
reg   [31:0] src2_i_0_data_reg;
reg    src2_i_0_vld_reg;
reg    src2_i_0_ack_out;
reg   [31:0] rslt_o_1_data_reg;
reg    rslt_o_1_vld_reg;
reg    rslt_o_1_vld_in;
reg    rslt_o_1_ack_in;
reg   [8:0] k1_reg_107;
wire   [31:0] grp_fu_139_p2;
reg   [31:0] reg_153;
wire    ap_CS_fsm_pp0_stage8;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_pp0_stage22_11001;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_131_p2;
reg   [31:0] reg_158;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_pp0_stage17_11001;
wire   [31:0] x_fu_185_p1;
reg   [31:0] x_reg_313;
wire    ap_CS_fsm_state2;
wire   [31:0] y_fu_189_p1;
reg   [31:0] y_reg_318;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] u_reg_343;
wire   [31:0] grp_fu_143_p2;
reg   [31:0] v2_reg_349;
reg   [31:0] add5_reg_355;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_pp0_stage31_11001;
wire   [0:0] icmp_ln23_fu_226_p2;
reg   [0:0] icmp_ln23_reg_361;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_block_pp0_stage32_11001;
wire   [0:0] icmp_ln23_1_fu_232_p2;
reg   [0:0] icmp_ln23_1_reg_366;
wire   [0:0] grp_fu_148_p2;
reg   [0:0] tmp_1_reg_371;
wire    ap_CS_fsm_pp0_stage34;
wire    ap_block_pp0_stage34_11001;
wire   [0:0] and_ln23_fu_242_p2;
reg   [0:0] and_ln23_reg_376;
wire    ap_CS_fsm_pp0_stage35;
wire    ap_block_pp0_stage35_11001;
wire   [8:0] k_fu_261_p2;
reg   [8:0] k_reg_380;
wire    ap_CS_fsm_pp0_stage36;
wire    ap_block_pp0_stage36_11001;
wire   [0:0] tmp_2_fu_267_p3;
reg   [0:0] tmp_2_reg_385;
wire   [31:0] zext_ln25_fu_280_p1;
wire    ap_CS_fsm_state44;
wire    ap_block_pp0_stage36_subdone;
reg    ap_predicate_tran43to44_state39;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
reg   [8:0] k_02_reg_119;
reg   [31:0] v22_fu_72;
wire    ap_block_pp0_stage0;
reg   [31:0] u23_fu_76;
reg   [31:0] v4_fu_80;
wire    ap_block_pp0_stage4;
reg   [31:0] phi_ln195_fu_84;
reg   [31:0] grp_fu_131_p0;
reg   [31:0] grp_fu_131_p1;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_pp0_stage23;
reg   [31:0] grp_fu_139_p0;
reg   [31:0] grp_fu_139_p1;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_pp0_stage18;
wire    ap_block_pp0_stage35;
wire    ap_block_pp0_stage32;
wire   [31:0] bitcast_ln23_fu_209_p1;
wire   [7:0] tmp_fu_212_p4;
wire   [22:0] trunc_ln23_fu_222_p1;
wire   [0:0] or_ln23_fu_238_p2;
wire    ap_block_pp0_stage36;
reg   [1:0] grp_fu_131_opcode;
wire    ap_block_pp0_stage9_00001;
wire    ap_block_pp0_stage23_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage32_00001;
wire    ap_CS_fsm_state45;
reg   [40:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage9_11001;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage10_11001;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage11_11001;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage12_11001;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage13_11001;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage14_11001;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage15_11001;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage16_11001;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage18_11001;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage19_11001;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage20_11001;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage21_11001;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage23_11001;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage24_11001;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage25_11001;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage26_11001;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_pp0_stage27_11001;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage28_11001;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage29_11001;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_pp0_stage30_11001;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_pp0_stage33_11001;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_pp0_stage35_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_801;
reg    ap_condition_805;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 41'd1;
#0 src1_i_0_data_reg = 32'd0;
#0 src1_i_0_vld_reg = 1'b0;
#0 src2_i_0_data_reg = 32'd0;
#0 src2_i_0_vld_reg = 1'b0;
#0 rslt_o_1_data_reg = 32'd0;
#0 rslt_o_1_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 v22_fu_72 = 32'd0;
#0 u23_fu_76 = 32'd0;
#0 v4_fu_80 = 32'd0;
#0 phi_ln195_fu_84 = 32'd0;
end

cfu_hls_faddfsub_32ns_32ns_32_9_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_9_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(grp_fu_131_p0),
    .din1(grp_fu_131_p1),
    .opcode(grp_fu_131_opcode),
    .ce(1'b1),
    .dout(grp_fu_131_p2)
);

cfu_hls_fadd_32ns_32ns_32_9_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_9_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(reg_158),
    .din1(x_reg_313),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

cfu_hls_fmul_32ns_32ns_32_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_5_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(grp_fu_139_p0),
    .din1(grp_fu_139_p1),
    .ce(1'b1),
    .dout(grp_fu_139_p2)
);

cfu_hls_fmul_32ns_32ns_32_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_5_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(reg_158),
    .din1(reg_158),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

cfu_hls_fcmp_32ns_32ns_1_3_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_3_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(1'b0),
    .din0(add5_reg_355),
    .din1(32'd1082130432),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_148_p2)
);

always @ (posedge ap_clk) begin
    ap_CS_fsm <= ap_NS_fsm;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_pp0_flush_enable)) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_enable_reg_pp0_iter0 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36_subdone)))) begin
        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln23_reg_376) & (tmp_2_reg_385 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        k1_reg_107 <= k_reg_380;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k1_reg_107 <= 9'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_805)) begin
            k_02_reg_119 <= k1_reg_107;
        end else if ((1'b1 == ap_condition_801)) begin
            k_02_reg_119 <= 9'd256;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln195_fu_84 <= 32'd0;
    end else if (((1'd0 == and_ln23_reg_376) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        phi_ln195_fu_84 <= reg_153;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        u23_fu_76 <= 32'd0;
    end else if (((1'd0 == and_ln23_fu_242_p2) & (1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        u23_fu_76 <= reg_153;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v22_fu_72 <= 32'd0;
    end else if (((1'd0 == and_ln23_fu_242_p2) & (1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        v22_fu_72 <= v2_reg_349;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v4_fu_80 <= 32'd0;
    end else if (((1'd0 == and_ln23_fu_242_p2) & (1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        v4_fu_80 <= reg_158;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add5_reg_355 <= grp_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001))) begin
        and_ln23_reg_376 <= and_ln23_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage32) & (1'b0 == ap_block_pp0_stage32_11001))) begin
        icmp_ln23_1_reg_366 <= icmp_ln23_1_fu_232_p2;
        icmp_ln23_reg_361 <= icmp_ln23_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_reg_380 <= k_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_153 <= grp_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_158 <= grp_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (rslt_o_1_vld_in == 1'b1) & (rslt_o_1_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (rslt_o_1_vld_in == 1'b1) & (rslt_o_1_vld_reg == 1'b0)))) begin
        rslt_o_1_data_reg[8 : 0] <= zext_ln25_fu_280_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (src1_i_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (src1_i_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (src1_i_0_vld_reg == 1'b0)))) begin
        src1_i_0_data_reg <= src1_i;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (src2_i_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (src2_i_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (src2_i_0_vld_reg == 1'b0)))) begin
        src2_i_0_data_reg <= src2_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage34) & (1'b0 == ap_block_pp0_stage34_11001))) begin
        tmp_1_reg_371 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36_11001))) begin
        tmp_2_reg_385 <= k_fu_261_p2[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        u_reg_343 <= grp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001))) begin
        v2_reg_349 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_313 <= x_fu_185_p1;
        y_reg_318 <= y_fu_189_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

always @ (*) begin
    if ((rslt_o_1_ack_in == 1'b0)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_tran43to44_state39 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (rslt_o_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (rslt_o_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_00001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_131_opcode = 2'd1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_00001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_00001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_131_opcode = 2'd0;
    end else begin
        grp_fu_131_opcode = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_131_p0 = reg_153;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_131_p0 = u23_fu_76;
    end else begin
        grp_fu_131_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23))) begin
            grp_fu_131_p1 = v2_reg_349;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            grp_fu_131_p1 = y_reg_318;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_131_p1 = v22_fu_72;
        end else begin
            grp_fu_131_p1 = 'bx;
        end
    end else begin
        grp_fu_131_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_139_p0 = u_reg_343;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_139_p0 = phi_ln195_fu_84;
    end else begin
        grp_fu_139_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35))) begin
            grp_fu_139_p1 = 32'd1073741824;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18))) begin
            grp_fu_139_p1 = u_reg_343;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_139_p1 = v4_fu_80;
        end else begin
            grp_fu_139_p1 = 'bx;
        end
    end else begin
        grp_fu_139_p1 = 'bx;
    end
end

always @ (*) begin
    if (((rslt_o_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (rslt_o_1_vld_reg == 1'b1)))) begin
        rslt_o_1_ack_in = 1'b1;
    end else begin
        rslt_o_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        rslt_o_1_vld_in = 1'b1;
    end else begin
        rslt_o_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state45) & (rslt_o_1_ack_in == 1'b1)))) begin
        src1_i_0_ack_out = 1'b1;
    end else begin
        src1_i_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state45) & (rslt_o_1_ack_in == 1'b1)))) begin
        src2_i_0_ack_out = 1'b1;
    end else begin
        src2_i_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (rslt_o_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln23_fu_242_p2 = (tmp_1_reg_371 & or_ln23_fu_238_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage34 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage35 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage36 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd40];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_801 = ((1'd0 == and_ln23_reg_376) & (tmp_2_fu_267_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36_11001));
end

always @ (*) begin
    ap_condition_805 = ((1'd1 == and_ln23_fu_242_p2) & (1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran43to44_state39 = ((1'd1 == and_ln23_reg_376) | (tmp_2_fu_267_p3 == 1'd1));
end

assign bitcast_ln23_fu_209_p1 = add5_reg_355;

assign icmp_ln23_1_fu_232_p2 = ((trunc_ln23_fu_222_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_226_p2 = ((tmp_fu_212_p4 != 8'd255) ? 1'b1 : 1'b0);

assign k_fu_261_p2 = (k1_reg_107 + 9'd1);

assign or_ln23_fu_238_p2 = (icmp_ln23_reg_361 | icmp_ln23_1_reg_366);

assign rslt_o = rslt_o_1_data_reg;

assign tmp_2_fu_267_p3 = k_fu_261_p2[32'd8];

assign tmp_fu_212_p4 = {{bitcast_ln23_fu_209_p1[30:23]}};

assign trunc_ln23_fu_222_p1 = bitcast_ln23_fu_209_p1[22:0];

assign x_fu_185_p1 = src1_i_0_data_reg;

assign y_fu_189_p1 = src2_i_0_data_reg;

assign zext_ln25_fu_280_p1 = k_02_reg_119;

always @ (posedge ap_clk) begin
    src1_i_0_vld_reg <= 1'b0;
    src2_i_0_vld_reg <= 1'b0;
    rslt_o_1_data_reg[31:9] <= 23'b00000000000000000000000;
    rslt_o_1_vld_reg <= 1'b0;
end

endmodule //cfu_hls
