-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cfu_hls is
port (
    ap_clk : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    funct3_i : IN STD_LOGIC_VECTOR (7 downto 0);
    funct7_i : IN STD_LOGIC_VECTOR (7 downto 0);
    src1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    src2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    rslt_o : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cfu_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cfu_hls_cfu_hls,hls_ip_2024_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-csg324-1,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.348000,HLS_SYN_LAT=4743,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1450,HLS_SYN_LUT=1148,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage34 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage35 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage36 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_40800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "auto";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "auto";
    signal src1_i_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal src1_i_0_vld_reg : STD_LOGIC := '0';
    signal src1_i_0_ack_out : STD_LOGIC;
    signal src2_i_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal src2_i_0_vld_reg : STD_LOGIC := '0';
    signal src2_i_0_ack_out : STD_LOGIC;
    signal rslt_o_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rslt_o_1_vld_reg : STD_LOGIC := '0';
    signal rslt_o_1_vld_in : STD_LOGIC;
    signal rslt_o_1_ack_in : STD_LOGIC;
    signal k1_reg_107 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "auto";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "auto";
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "auto";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "auto";
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal x_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "auto";
    signal y_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "auto";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "auto";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage31 : signal is "auto";
    signal ap_block_pp0_stage31_11001 : BOOLEAN;
    signal icmp_ln23_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage32 : signal is "auto";
    signal ap_block_pp0_stage32_11001 : BOOLEAN;
    signal icmp_ln23_1_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_371 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage34 : signal is "auto";
    signal ap_block_pp0_stage34_11001 : BOOLEAN;
    signal and_ln23_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage35 : signal is "auto";
    signal ap_block_pp0_stage35_11001 : BOOLEAN;
    signal k_fu_261_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_reg_380 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage36 : signal is "auto";
    signal ap_block_pp0_stage36_11001 : BOOLEAN;
    signal tmp_2_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_385 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln25_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "auto";
    signal ap_block_pp0_stage36_subdone : BOOLEAN;
    signal ap_predicate_tran43to44_state39 : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "auto";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal k_02_reg_119 : STD_LOGIC_VECTOR (8 downto 0);
    signal v22_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal u23_fu_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal v4_fu_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal phi_ln195_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_131_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "auto";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "auto";
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal grp_fu_139_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "auto";
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal ap_block_pp0_stage35 : BOOLEAN;
    signal ap_block_pp0_stage32 : BOOLEAN;
    signal bitcast_ln23_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_212_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_222_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln23_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage36 : BOOLEAN;
    signal grp_fu_131_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage9_00001 : BOOLEAN;
    signal ap_block_pp0_stage23_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage32_00001 : BOOLEAN;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "auto";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_11001 : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_11001 : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_11001 : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_pp0_stage28_11001 : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage29_11001 : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_11001 : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_block_pp0_stage32_subdone : BOOLEAN;
    signal ap_block_pp0_stage33_subdone : BOOLEAN;
    signal ap_block_pp0_stage33_11001 : BOOLEAN;
    signal ap_block_pp0_stage34_subdone : BOOLEAN;
    signal ap_block_pp0_stage35_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_801 : BOOLEAN;
    signal ap_condition_805 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cfu_hls_faddfsub_32ns_32ns_32_9_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cfu_hls_fadd_32ns_32ns_32_9_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cfu_hls_fmul_32ns_32ns_32_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cfu_hls_fcmp_32ns_32ns_1_3_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    faddfsub_32ns_32ns_32_9_full_dsp_1_U1 : component cfu_hls_faddfsub_32ns_32ns_32_9_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_const_logic_0,
        din0 => grp_fu_131_p0,
        din1 => grp_fu_131_p1,
        opcode => grp_fu_131_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_131_p2);

    fadd_32ns_32ns_32_9_full_dsp_1_U2 : component cfu_hls_fadd_32ns_32ns_32_9_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_const_logic_0,
        din0 => reg_158,
        din1 => x_reg_313,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p2);

    fmul_32ns_32ns_32_5_max_dsp_1_U3 : component cfu_hls_fmul_32ns_32ns_32_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_const_logic_0,
        din0 => grp_fu_139_p0,
        din1 => grp_fu_139_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_139_p2);

    fmul_32ns_32ns_32_5_max_dsp_1_U4 : component cfu_hls_fmul_32ns_32ns_32_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_const_logic_0,
        din0 => reg_158,
        din1 => reg_158,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);

    fcmp_32ns_32ns_1_3_no_dsp_1_U5 : component cfu_hls_fcmp_32ns_32ns_1_3_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_const_logic_0,
        din0 => add5_reg_355,
        din1 => ap_const_lv32_40800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_148_p2);





    ap_CS_fsm_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;

    ap_enable_reg_pp0_iter0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
            end if; 
        end if;
    end process;

    ap_enable_reg_pp0_iter1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (ap_const_boolean_0 = ap_block_pp0_stage36_subdone)))) then 
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    k1_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln23_reg_376) and (tmp_2_reg_385 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                k1_reg_107 <= k_reg_380;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                k1_reg_107 <= ap_const_lv9_1;
            end if; 
        end if;
    end process;

    k_02_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_805)) then 
                    k_02_reg_119 <= k1_reg_107;
                elsif ((ap_const_boolean_1 = ap_condition_801)) then 
                    k_02_reg_119 <= ap_const_lv9_100;
                end if;
            end if; 
        end if;
    end process;

    phi_ln195_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln195_fu_84 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_0 = and_ln23_reg_376) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                phi_ln195_fu_84 <= reg_153;
            end if; 
        end if;
    end process;

    rslt_o_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    src1_i_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    src2_i_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    u23_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                u23_fu_76 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_0 = and_ln23_fu_242_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_const_boolean_0 = ap_block_pp0_stage35_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                u23_fu_76 <= reg_153;
            end if; 
        end if;
    end process;

    v22_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v22_fu_72 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_0 = and_ln23_fu_242_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_const_boolean_0 = ap_block_pp0_stage35_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                v22_fu_72 <= v2_reg_349;
            end if; 
        end if;
    end process;

    v4_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v4_fu_80 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_0 = and_ln23_fu_242_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_const_boolean_0 = ap_block_pp0_stage35_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                v4_fu_80 <= reg_158;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add5_reg_355 <= grp_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_const_boolean_0 = ap_block_pp0_stage35_11001))) then
                and_ln23_reg_376 <= and_ln23_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage32) and (ap_const_boolean_0 = ap_block_pp0_stage32_11001))) then
                icmp_ln23_1_reg_366 <= icmp_ln23_1_fu_232_p2;
                icmp_ln23_reg_361 <= icmp_ln23_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (ap_const_boolean_0 = ap_block_pp0_stage36_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                k_reg_380 <= k_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_153 <= grp_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_158 <= grp_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (rslt_o_1_vld_in = ap_const_logic_1) and (rslt_o_1_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (rslt_o_1_vld_in = ap_const_logic_1) and (rslt_o_1_vld_reg = ap_const_logic_0)))) then
                    rslt_o_1_data_reg(8 downto 0) <= zext_ln25_fu_280_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (src1_i_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (src1_i_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (src1_i_0_vld_reg = ap_const_logic_0)))) then
                src1_i_0_data_reg <= src1_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (src2_i_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (src2_i_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (src2_i_0_vld_reg = ap_const_logic_0)))) then
                src2_i_0_data_reg <= src2_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage34) and (ap_const_boolean_0 = ap_block_pp0_stage34_11001))) then
                tmp_1_reg_371 <= grp_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (ap_const_boolean_0 = ap_block_pp0_stage36_11001))) then
                tmp_2_reg_385 <= k_fu_261_p2(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001))) then
                u_reg_343 <= grp_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001))) then
                v2_reg_349 <= grp_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_reg_313 <= x_fu_185_p1;
                y_reg_318 <= y_fu_189_p1;
            end if;
        end if;
    end process;
    src1_i_0_vld_reg <= '0';
    src2_i_0_vld_reg <= '0';
    rslt_o_1_data_reg(31 downto 9) <= "00000000000000000000000";
    rslt_o_1_vld_reg <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, rslt_o_1_ack_in, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage36_subdone, ap_block_pp0_stage3_subdone, ap_CS_fsm_pp0_stage3, ap_CS_fsm_state45, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_block_pp0_stage31_subdone, ap_block_pp0_stage32_subdone, ap_block_pp0_stage33_subdone, ap_block_pp0_stage34_subdone, ap_block_pp0_stage35_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage32_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage33_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when ap_ST_fsm_pp0_stage34 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage34_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                end if;
            when ap_ST_fsm_pp0_stage35 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage35_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                end if;
            when ap_ST_fsm_pp0_stage36 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage36_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (rslt_o_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln23_fu_242_p2 <= (tmp_1_reg_371 and or_ln23_fu_238_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage31 <= ap_CS_fsm(33);
    ap_CS_fsm_pp0_stage32 <= ap_CS_fsm(34);
    ap_CS_fsm_pp0_stage34 <= ap_CS_fsm(36);
    ap_CS_fsm_pp0_stage35 <= ap_CS_fsm(37);
    ap_CS_fsm_pp0_stage36 <= ap_CS_fsm(38);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state44 <= ap_CS_fsm(39);
    ap_CS_fsm_state45 <= ap_CS_fsm(40);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;

    ap_ST_fsm_state45_blk_assign_proc : process(rslt_o_1_ack_in)
    begin
        if ((rslt_o_1_ack_in = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_801_assign_proc : process(and_ln23_reg_376, ap_CS_fsm_pp0_stage36, ap_block_pp0_stage36_11001, tmp_2_fu_267_p3)
    begin
                ap_condition_801 <= ((ap_const_lv1_0 = and_ln23_reg_376) and (tmp_2_fu_267_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (ap_const_boolean_0 = ap_block_pp0_stage36_11001));
    end process;


    ap_condition_805_assign_proc : process(and_ln23_fu_242_p2, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_11001)
    begin
                ap_condition_805 <= ((ap_const_lv1_1 = and_ln23_fu_242_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_const_boolean_0 = ap_block_pp0_stage35_11001));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage36, ap_block_pp0_stage36_subdone, ap_predicate_tran43to44_state39)
    begin
        if (((ap_predicate_tran43to44_state39 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (ap_const_boolean_0 = ap_block_pp0_stage36_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(rslt_o_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (rslt_o_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_tran43to44_state39_assign_proc : process(and_ln23_reg_376, tmp_2_fu_267_p3)
    begin
                ap_predicate_tran43to44_state39 <= ((ap_const_lv1_1 = and_ln23_reg_376) or (tmp_2_fu_267_p3 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(rslt_o_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (rslt_o_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln23_fu_209_p1 <= add5_reg_355;

    grp_fu_131_opcode_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage9_00001, ap_block_pp0_stage23_00001, ap_block_pp0_stage0_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_131_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_131_opcode <= ap_const_lv2_0;
        else 
            grp_fu_131_opcode <= "XX";
        end if; 
    end process;


    grp_fu_131_p0_assign_proc : process(reg_153, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, u23_fu_76, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_131_p0 <= reg_153;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_131_p0 <= u23_fu_76;
        else 
            grp_fu_131_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_131_p1_assign_proc : process(ap_enable_reg_pp0_iter0, y_reg_318, ap_CS_fsm_pp0_stage0, v2_reg_349, v22_fu_72, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23))) then 
                grp_fu_131_p1 <= v2_reg_349;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                grp_fu_131_p1 <= y_reg_318;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_131_p1 <= v22_fu_72;
            else 
                grp_fu_131_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_131_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_139_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, u_reg_343, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage4, phi_ln195_fu_84, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18, ap_block_pp0_stage35)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_const_boolean_0 = ap_block_pp0_stage35) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_139_p0 <= u_reg_343;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_139_p0 <= phi_ln195_fu_84;
        else 
            grp_fu_139_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_139_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, u_reg_343, ap_CS_fsm_pp0_stage35, v4_fu_80, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18, ap_block_pp0_stage35)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_const_boolean_0 = ap_block_pp0_stage35))) then 
                grp_fu_139_p1 <= ap_const_lv32_40000000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18))) then 
                grp_fu_139_p1 <= u_reg_343;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                grp_fu_139_p1 <= v4_fu_80;
            else 
                grp_fu_139_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_139_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln23_1_fu_232_p2 <= "1" when (trunc_ln23_fu_222_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_fu_226_p2 <= "0" when (tmp_fu_212_p4 = ap_const_lv8_FF) else "1";
    k_fu_261_p2 <= std_logic_vector(unsigned(k1_reg_107) + unsigned(ap_const_lv9_1));
    or_ln23_fu_238_p2 <= (icmp_ln23_reg_361 or icmp_ln23_1_reg_366);
    rslt_o <= rslt_o_1_data_reg;

    rslt_o_1_ack_in_assign_proc : process(rslt_o_1_vld_reg)
    begin
        if (((rslt_o_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (rslt_o_1_vld_reg = ap_const_logic_1)))) then 
            rslt_o_1_ack_in <= ap_const_logic_1;
        else 
            rslt_o_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    rslt_o_1_vld_in_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            rslt_o_1_vld_in <= ap_const_logic_1;
        else 
            rslt_o_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    src1_i_0_ack_out_assign_proc : process(rslt_o_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (rslt_o_1_ack_in = ap_const_logic_1)))) then 
            src1_i_0_ack_out <= ap_const_logic_1;
        else 
            src1_i_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src2_i_0_ack_out_assign_proc : process(rslt_o_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (rslt_o_1_ack_in = ap_const_logic_1)))) then 
            src2_i_0_ack_out <= ap_const_logic_1;
        else 
            src2_i_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_267_p3 <= k_fu_261_p2(8 downto 8);
    tmp_fu_212_p4 <= bitcast_ln23_fu_209_p1(30 downto 23);
    trunc_ln23_fu_222_p1 <= bitcast_ln23_fu_209_p1(23 - 1 downto 0);
    x_fu_185_p1 <= src1_i_0_data_reg;
    y_fu_189_p1 <= src2_i_0_data_reg;
    zext_ln25_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_02_reg_119),32));
end behav;
